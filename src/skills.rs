use crate::AttributeType;
use std::str::FromStr;

#[allow(renamed_and_removed_lints)]
#[allow(enum_variant_names)]
#[derive(
    Debug,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    strum::EnumIter,
    derive_more::Display,
)]
pub enum Skill {
    Accounting,
    Acrobatics,
    Acting,
    Administration,
    Aerobatics,
    Airshipman,
    Alchemy,
    AnimalHandling,
    Anthropology,
    Aquabatics,
    Archaeology,
    Architecture,
    AreaKnowledge,
    Armoury,
    Artillery,
    Artist(Artist),
    Astronomy,
    Autohypnosis,
    AxeMace,
    Bashing,
    Battlesuit,
    BeamWeapons,
    Bicycling,
    Bioengineering,
    Biology,
    BlindFighting,
    Blowpipe,
    Boating,
    BodyControl,
    BodyLanguage,
    BodySense,
    Bolas,
    BoneCarving,
    Bow,
    Boxing,
    BrainHacking,
    Brainwashing,
    Brawling,
    BreakingBlow,
    BreathControl,
    Broadsword,
    Camouflage,
    Captivate,
    Carousing,
    Carpentry,
    Cartography,
    Chemistry,
    Climbing,
    Cloak,
    CombatArt,
    ComputerHacking,
    ComputerOperation,
    ComputerProgramming,
    Connoisseur,
    Cooking,
    Counterfeiting,
    Crewman,
    Criminology,
    Crossbow,
    Cryptography,
    CurrentAffairs(CurrentAffairs),
    Dancing,
    DetectLies,
    Diagnosis,
    Diplomacy,
    Disguise,
    DivingSuit,
    Dreaming,
    Driving,
    Dropping,
    Economics,
    Electrician,
    ElectronicsOperation(ElectronicsOperation),
    ElectronicsRepair,
    Engineer,
    Enthrallment,
    EroticArt,
    Escape,
    EsotericMedicine,
    Exorcism,
    ExpertSkill(ExpertSkill),
    Explosives(Explosives),
    Falconry,
    Farming,
    FastDraw,
    FastTalk,
    Filch,
    Finance,
    FireEating,
    FirstAid,
    Fishing,
    Flail,
    Flight,
    FlintKnapping,
    FlyingLeap,
    ForceSword,
    ForceWhip,
    ForcedEntry,
    Forensics,
    Forgery,
    FortuneTelling,
    ForwardObserver,
    FreeFall,
    FreightHandling,
    Gambling,
    Games,
    Gardening,
    Garrote,
    Geography,
    Geology,
    Gesture,
    GroupPerformance,
    Gunner,
    Guns,
    HazardousMaterials,
    Heraldry,
    HerbLore,
    HiddenLore(HiddenLore),
    Hiking,
    History,
    HobbySkill,
    Holdout,
    Housekeeping,
    Hypnotism,
    ImmovableStance,
    InnateAttack,
    IntelligenceAnalysis,
    Interrogation,
    Intimidation,
    InvisibilityArt,
    Jeweler,
    JitteSai,
    Judo,
    Jumping,
    Karate,
    Kiai,
    Knife,
    KnotTying,
    Kusari,
    Lance,
    Lasso,
    Law,
    Leadership,
    Leatherworking,
    Lifting,
    LightWalk,
    Linguistics,
    LipReading,
    LiquidProjector,
    Literature,
    Lockpicking,
    Machinist,
    MainGauche,
    Makeup,
    MarketAnalysis,
    Masonry,
    Mathematics(Mathematics),
    Mechanic,
    Meditation,
    MeleeWeapon,
    MentalStrength,
    Merchant,
    Metallurgy,
    Meteorology,
    Mimicry(Mimicry),
    MindBlock,
    MonowireWhip,
    Mount,
    MusicalComposition,
    MusicalInfluence,
    MusicalInstrument,
    Naturalist,
    Navigation,
    NBCSuit,
    Net,
    Observation,
    Occultism,
    Packing,
    Paleontology(Paleontology),
    Panhandling,
    Parachuting,
    ParryMissileWeapons,
    Performance,
    Persuade,
    Pharmacy(Pharmacy),
    Philosophy,
    Photography,
    Physician,
    Physics,
    Physiology,
    Pickpocket,
    Piloting,
    Poetry,
    Poisons,
    Polearm,
    Politics,
    PowerBlow,
    PressurePoints,
    PressureSecrets,
    ProfessionalSkill,
    Propaganda,
    Prospecting,
    Psychology,
    PublicSpeaking,
    Push,
    Rapier,
    ReligiousRitual,
    Research,
    Riding,
    RitualMagic,
    Running,
    Saber,
    SavoirFaire(SavoirFaire),
    Scrounging,
    Scuba,
    Seamanship,
    Search,
    Sewing,
    SexAppeal,
    Shadowing,
    Shield,
    Shiphandling,
    Shortsword,
    Singing,
    Skating,
    Skiing,
    SleightOfHand,
    Sling,
    Smallsword,
    Smith,
    Smuggling,
    Sociology,
    Soldier,
    Spacer,
    Spear,
    SpearThrower,
    SpeedReading,
    Sports,
    Staff,
    StageCombat,
    Stealth,
    Streetwise,
    Submarine,
    Submariner,
    Suggest,
    SumoWrestling,
    Surgery,
    Survival,
    SwayEmotions,
    Swimming,
    SymbolDrawing,
    Tactics,
    Teaching,
    Teamster,
    Thaumatology,
    Theology,
    Throwing,
    ThrowingArt,
    ThrownWeapon,
    Tonfa,
    Tracking,
    Traps,
    TwoHandedAxeMace,
    TwoHandedFlail,
    TwoHandedSword,
    Typing,
    UrbanSurvival,
    VaccSuit,
    Ventriloquism,
    Veterinary,
    WeatherSense,
    WeirdScience,
    Whip,
    Wrestling,
    Writing,
    ZenArchery,
}

/// Human readable categories used to tag Skill variants for easier discovery and navigation.
#[derive(
    Debug,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    strum::EnumIter,
    derive_more::Display,
    derive_more::FromStr,
)]
pub enum Family {
    Animal,
    Arts,
    Athletic,
    Business,
    Combat,
    Craft,
    Criminal,
    Design,
    Entertainment,
    Esoteric,
    Everyman,
    Exploration,
    Humanities,
    Invention,
    Knowledge,
    Magical,
    Maintenance,
    Medical,
    Military,
    #[display("Natural Sciences")]
    NaturalSciences,
    Occult,
    Outdoor,
    Plant,
    Police,
    #[display("Ranged Combat")]
    RangedCombat,
    #[display("Ranged Weapon")]
    RangedWeapon,
    Repair,
    Scholarly,
    Social,
    #[display("Social Sciences")]
    SocialSciences,
    Spy,
    Street,
    Technical,
    Vehicle,
    Weapon,
}

impl Family {
    pub fn from_value(value: &str) -> Option<Self> {
        match Self::from_str(value) {
            Ok(result) => Some(result),
            Err(_) => None,
        }
    }
}

#[derive(
    Debug,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::From,
)]
pub enum SkillBase {
    #[from(AttributeType)]
    Attribute(AttributeType),
    #[from(Skill)]
    Skill(Skill),
}

#[derive(
    Debug,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::From,
)]
pub struct SkillDefault {
    base: SkillBase,
    modifier: i64,
}

impl SkillDefault {
    pub fn new<T: Into<SkillBase>>(base: T, modifier: i64) -> Self {
        let base = base.into();
        Self { base, modifier }
    }
}

/// Specializations for the Artist skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Artist {
    #[default]
    Pottery,
    Sculpting,
    Woodworking,
}

/// Specializations for the Current Affairs skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum CurrentAffairs {
    #[default]
    HighCulture,
    PopularCulture,
    Business,
}

/// Specializations for the Electronics Operation skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum ElectronicsOperation {
    #[default]
    Media,
    Security,
    Medical,
    ElectronicWarfare,
    Surveillance,
}

/// Specializations for the Expert Skill skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum ExpertSkill {
    #[default]
    Epidemiology,
    MilitaryScience,
    Hydrology,
    NaturalPhilosophy,
    Psionics,
    Egyptology,
    PoliticalScience,
    Thanatology,
    Xenology,
    ComputerSecurity,
    Demolition,
    ExplosiveOrdnanceDisposal,
}

/// Specializations for the Explosives skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Explosives {
    #[default]
    Demolition,
    ExplosiveOrdnanceDisposal,
}

/// Specializations for the Hidden Lore skill.
#[allow(renamed_and_removed_lints)]
#[allow(enum_variant_names)]
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum HiddenLore {
    #[default]
    DemonLore,
    FaerieLore,
    SpiritLore,
}

/// Specializations for the Mathematics skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Mathematics {
    #[default]
    Statistics,
    Surveying,
}

/// Specializations for the Mimicry skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Mimicry {
    #[default]
    AnimalSounds,
    BirdCalls,
}

/// Specializations for the Paleontology skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Paleontology {
    #[default]
    Paleobotany,
    Paleoanthropology,
}

/// Specializations for the Pharmacy skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Pharmacy {
    #[default]
    Herbal,
}

/// Specializations for the Savoir-Faire skill.
#[derive(
    Debug,
    Default,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum SavoirFaire {
    #[default]
    HighSociety,
    Mafia,
    Servant,
    Military,
    Police,
}

/// Used to classify skills, spells, quick contests etc.
/// A measure of how quickly a [`Character`](crate::Character) can learn a [`Skill`].
#[derive(
    Debug,
    Copy,
    Clone,
    PartialEq,
    Eq,
    PartialOrd,
    Ord,
    Hash,
    serde::Serialize,
    serde::Deserialize,
    derive_more::Display,
    derive_more::FromStr,
    strum::EnumIter,
)]
pub enum Difficulty {
    VeryEasy,
    Easy,
    Moderate,
    Hard,
    VeryHard,
}

impl Difficulty {
    /// Parses common abbreviations for `Difficulty` used in the text references.
    pub fn from_abbr(abbr: &str) -> Option<Self> {
        let lwr = abbr.to_lowercase();
        let value = match lwr.as_str() {
            "ve" => Self::VeryEasy,
            "e" => Self::Easy,
            "m" => Self::Moderate,
            "h" => Self::Hard,
            "vh" => Self::VeryHard,
            _ => return None,
        };
        Some(value)
    }
}
